#! /usr/bin/env python3


def q1(text):
    # 1.1 - Implement an algorithm to determine if a string has all unique characters. What if you
    # can not use additional data structures?

    # The set() function returns a list of unique elements within a string or list
    if len(text) != len(set(text)):
        print(text, ' has duplicated characters')
    else:
        print(text, ' has unique characters')


def q2(text):

    # 1.2 - Write code to reverse a C-Style String. (C-String means that “abcd” is represented as
    # five characters, including the null character.)

    # I'm assuming the expected output for 'abcd\n' would be 'dcba\n'

    # Split the text into individual characters, excluding the last character
    chars = list(text[:-1])

    # Join the reversed list back into a string and append a newline
    return ''.join(reversed(chars)) + '\n'


def q3(text):
    # 1.3 - Remove duplicate characters from a string without a buffer or copying the array

    # Iterate over text and include it in the join if there is only one occurence in text
    return ''.join(c for c in text if text.count(c) == 1)


def q4(a, b):
    # 1.4 - Test whether two strings are anagrams or not

    # First, make sure they're the same length
    if len(a) != len(b):
        return False

    # If they are the same length, make sure there is the same number of each character
    for char in set(a):
        if a.count(char) != b.count(char):
            return False

    return True


def q5(text):
    # 1.5 - replace all spaces with '%20'

    return text.replace(' ', '%20')


def q6(matrix):
    # 1.6 -- Rotate an NxN matrix in space
    # Essentially every element at position n and m must go to m and n

    # Matrix is square so just need the size of one side
    size = len(matrix)

    for x in range(size):
        for y in range(x, size):
            matrix[x][y], matrix[y][x] = matrix[y][x], matrix[x][y]

    return matrix

def q7(matrix):
    # 1.7 - Given an NxM matrix, set entire row and column to zero if any element is zero
    # Note! This is a destructive function -- it will edit the original matrix

    num_cols = len(matrix)
    num_rows = len(matrix[0])

    # Search
    zeros = []
    for x in range(num_cols):
        for y in range(num_rows):
            if matrix[x][y] == 0:
                zeros.append((x, y))

    # Destroy
    for x,y in zeros:
        # Cancel out entire row is easy
        matrix[x] = [0] * num_cols
        # Little bit more work to loop through each column
        for pos in range(num_rows):
            matrix[pos][x] = 0

    # Return editted matrix
    return matrix


def q8(a, b):
    # 1.8 Given two strings, determine if string b is a 'rotation' of string a using substr only once
    # 'waterbottle' is a rotation of 'erbottlewat'

    # First, make sure they have the same len and characters
    if len(a) != len(b) or set(a) != set(b):
        return False


    # I think we essentially need to 'unrotate' the second string to really check this
    # Perhaps we could find a unique character and use it's location in each string to unwind it
    # but if there are no unique characters this wouldn't work.
